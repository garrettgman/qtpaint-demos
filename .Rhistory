view
class(view)
2
y
source("/home/larman/research/graphics/qvizexpt/demo/canvas.R")
df
mode(df[,1])
help(splom)
help.search("scatterplot matrix")
help(pairs)
0
0
library(qvizexpt)
matrix(2)
is.numeric(matrix(2))
cars
help(identify)
library(qvizexpt)
help(knn)
help.search("nearest neighbor")
library(class)
help(knn)
knn(df, df[15,], 1:nrow(df))
gc()
knn(df, df[15,], 1:nrow(df), use.all=FALSE)
system.time(knn(df, df[15,], 1:nrow(df)))
library(Biobase)
help(matchpt)
mat <- as.matrix(df)
system.time(knn(mat, mat[15,], 1:nrow(mat)))
system.time(knn(mat, mat[15,], 1:nrow(mat)))
system.time(knn(mat, mat[15,], 1:nrow(mat)))
system.time(knn(mat, mat[15,], 1:nrow(mat)))
system.time(matchpt(mat[15,], mat))
system.time(matchpt(mat[15,,drop=FALSE], mat))
matchpt
system.time(matchpt(mat[15,,drop=FALSE], mat))
system.time(matchpt(mat[15,,drop=FALSE], mat))
help(.Platform)
.Machine
invert
inv
help.search("invert")
help(grconvertX)
mat <- matrix(c(2, 0, 1, 1, 0, 5), ncol=2)
mat
mat^-1
help.search("inverse")
help(matrix)
help(grconvertX)
library(Biobase)
help(matchpt)
data(cars)
cars
data(mtcars)
head(mtcars)
qvText
foo <- { print("foo") }
foo
foo <- quote({ print("foo") })
eval(foo)
help(text)
help(par)
help(box)
help(rect)
help(par)
plot(1:10)
formals
qvLimits(layer)
qvGeometry
3
x
1
hits
df[hits,]
as.matrix(df[hits,])
mode(df[hits,])
1
hitmat
event$screenPos
matrix(event$screenPos, ncol=2)
head(df)
df
5 * -.989 + 331.4
326 * -1.01 + 670
136*-1.01+670
data(mtcars)
df$hp
mtcrs$hp
mtcars$hp
max(mtcars$hp)
range(mtcars$mpg)
plot(mtcars$mpg, mtcars$hp)
0
system.time(x < 1 & x > 0 & y < 1 & y > 0)
system.time(x < 1 & x > 0 & y < 1 & y > 0)
system.time(x < 1 & x > 0 & y < 1 & y > 0)
help(rect)
help.search("matrix")
help(data.matrix)
qvRectangle
qvRect
qvLimits
qvAddGraphicsWidget
qvRect
qvRect
qvLimits(layer)
ls()
qvLimits(points)
0
}
qvUpdate(points)
qvUpdate(points)
view
class(view)
class(view$extp)
class(view$extp)
library(qvizexpt)
library(qvizexpt)
library(qvizexpt)
scene
rm(scene)
gc()
qvScene
qvFinalizeObject
0
0
2
n
library(qvizexpt)
scene
class(scene)
library(qvizexpt)
scene
class(view)
class(view$extp)
view
qvShowWidget
library(qvizexpt)
view
rm(view)
gc()
view2 <- view
rm(view)
gc()
rm(view2)
gc()
source("http://bioconductor.org/biocLite.R")
biocLite("xcms")
`
